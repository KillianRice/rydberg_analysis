function funcOut = rabi_oscillation_fit(analyVar, indivDataset, avgDataset)
    
    %% lossspectrafit - Soumya K kanungo 2020.06.12
    % Fits MCS data to a typical loss profile.
    
    form = @(coeffs, x) coeffs(1) * ...
        (sin(coeffs(2).*x + coeffs(3))) .* exp(-(coeffs(4).*x))  + ...
        coeffs(5);% Decaying oscillation profile
    
    indVarField = 'imagevcoAtom'; % independent variable
    depVarField = 'sfiIntegral_roi1_ratio'; % dependent variable
    depVarField2 = 'sfiIntegral_roi2_ratio'; % dependent variable
    
    %% initial guess code
    function initialguess = x0(xdata, ydata)
        initialguess = [1,8*10^6,1,1,1];
        initialguess(1) = min(ydata)-max(ydata);
        initialguess(5) = mean(ydata);
    end


    %% options
    % the base_fit function is designed to be flexible, and can accept a
    % lot of different parameters to adjust 
    %%%%% Default Options %%%%%
%         options = struct(...
%         'DataPlotFunction', @defaultDataPlot,...
%         'AvgDataPlotFunction', @defaultAvgDataPlot,...
%         'FitLinePlotFunction', @defaultFitLinePlot,...
%         'AnnotateFunction', @defaultAnnotate,...
%         'IndivFitPlotFunction', @defaultIndivFitPlot,...
%         'PlotIndivFits' , true,...
%         'PlotAvgFits', true,...
%         'XAxisLabel', indVarField ,...
%         'YAxisLabel', depVarField,...
%         'FitLB', [],...
%         'FitUB', [],...
%         'FitOptions', struct('Display','off'),...
%         'PlotInitialGuess', true, ...
%         'InitialGuessPlotFunction', @defaultInitialGuessPlot,...
%         'PlotAll', true,...
%         'PlotAllAvgs', true, ...
%         'CoeffNames', {{}},...
%         'CoeffUnits', {{}},...
%         'YAxisScale', 'linear',...
%         'XAxisScale', 'linear');
    %%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    options = struct(...
        'PlotIndivFits', false,...
        'PlotAll', false,...
        'PlotAllAvgs', false,...
        'CoeffNames', {{'Ampl.', 'Freq.', 'phase', 'decay rate'}},...
        'CoeffUnits', {{'','MHz','rads','/\mu sec'}},...
        'AnnotateFunction', @myAnnotate,...
        'PlotInitialGuess', false);
    base_fit(analyVar, indivDataset, avgDataset, form, indVarField, depVarField, @x0, options)
    base_fit(analyVar, indivDataset, avgDataset, form, indVarField, depVarField2, @x0, options)
    
    funcOut.analyVar = analyVar;
    funcOut.indivDataset = indivDataset;
    funcOut.avgDataset = avgDataset;

end
function an = myAnnotate(coeffs, err, coeffNames, coeffUnits)
    dim = [.7 .5 .3 .3];
    coeffs(2) = coeffs(2)/10^6/2/pi  % converting the Omega to MHz units 
    err(2) = err(2)/10^6/2/pi      % converting the Omega to MHz units 
    strs = cell(4,1);
    coeffs(4) = coeffs(4)/10^6  % converting rate to per microsecond units
    for i = 1:4
        if i <= numel(coeffs)
            strs{i} = [coeffNames{i}, ': ', unc_string(coeffs(i),err(i)),...
                ' ', coeffUnits{i}, newline];
            strs{i}
        end
    end
    
    
    an = annotation('textbox', dim, 'String', strjoin(strs),...
        'FitBoxToText', 'on', 'BackgroundColor', 'white');
end

